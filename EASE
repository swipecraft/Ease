import os
import time
import logging
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import yfinance as yf
import talib
import speech_recognition as sr
import requests
from bs4 import BeautifulSoup
import pyttsx3
from nsepython import nsefetch  # For NSE real-time data

# Configure logging for debugging and monitoring
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize text-to-speech engine for interactive feedback
engine = pyttsx3.init()

### Real-Time Data Fetching from NSE
def get_nse_realtime_data(symbol):
    """
    Fetch real-time data from NSE using nsepython.

    Args:
        symbol (str): Stock symbol (e.g., "TCS" without .NS).

    Returns:
        dict: Real-time data including price, volume, etc.
    """
    try:
        url = f"https://www.nseindia.com/api/quote-equity?symbol={symbol}"
        data = nsefetch(url)
        if data and 'priceInfo' in data:
            return {
                "last_price": data['priceInfo']['lastPrice'],
                "open": data['priceInfo']['open'],
                "high": data['priceInfo']['intraDayHighLow']['max'],
                "low": data['priceInfo']['intraDayHighLow']['min'],
                "volume": data['marketDeptOrderBook']['totalTradedVolume'],
                "timestamp": datetime.now()
            }
        else:
            logging.error(f"No real-time data for {symbol}")
            return {}
    except Exception as e:
        logging.error(f"Error fetching NSE real-time data for {symbol}: {e}")
        return {}

### Historical Data Fetching with Caching and Fallback
def get_stock_history(symbol, interval="minute", days=30):
    """
    Fetch historical stock data from Yahoo Finance with caching.

    Args:
        symbol (str): Stock symbol (e.g., "TCS.NS" for TCS on NSE).
        interval (str): Data interval ("minute" or "day").
        days (int): Number of days of data to fetch.

    Returns:
        pd.DataFrame: Historical data with date, open, high, low, close, volume.
    """
    file_path = f"{symbol}_{interval}.csv"
    try:
        if os.path.exists(file_path):
            df = pd.read_csv(file_path, parse_dates=["date"])
            last_date = df["date"].max()
            start_date = last_date + timedelta(days=1)
        else:
            df = pd.DataFrame()
            start_date = datetime.now() - timedelta(days=days)

        if start_date >= datetime.now():
            return df

        stock = yf.Ticker(symbol)
        new_df = stock.history(interval=interval if interval == "minute" else "1d",
                               start=start_date, end=datetime.now())
        new_df.reset_index(inplace=True)
        new_df.columns = [col.lower() for col in new_df.columns]
        df = pd.concat([df, new_df], ignore_index=True)
        df = df.drop_duplicates(subset=["date"])
        df.to_csv(file_path, index=False)
        logging.info(f"Fetched {len(new_df)} new records for {symbol}")
        return df
    except Exception as e:
        logging.error(f"Error fetching data for {symbol}: {e}")
        return pd.DataFrame()

### Apply Technical Indicators
def apply_technical_indicators(df, rsi_period=14, sma_period=50):
    """
    Apply basic technical indicators to the dataframe.

    Args:
        df (pd.DataFrame): Historical data.
        rsi_period (int): RSI period.
        sma_period (int): SMA period.

    Returns:
        pd.DataFrame: Dataframe with added indicators.
    """
    df["RSI"] = talib.RSI(df["close"], timeperiod=rsi_period)
    df["SMA"] = talib.SMA(df["close"], timeperiod=sma_period)
    return df

### Portfolio Analysis and Risk Assessment
def analyze_portfolio(portfolio):
    """
    Analyze a user's portfolio and assess risk capability.

    Args:
        portfolio (dict): Dictionary of {symbol: shares} (e.g., {"TCS.NS": 10, "RELIANCE.NS": 5}).

    Returns:
        dict: Risk assessment and next trade suggestion.
    """
    portfolio_value = 0
    volatilities = []
    returns = []

    for symbol, shares in portfolio.items():
        # Fetch historical data for risk analysis
        df = get_stock_history(symbol, interval="day", days=90)
        if not df.empty:
            # Calculate portfolio value
            latest_price = get_nse_realtime_data(symbol.split(".")[0])["last_price"]
            position_value = latest_price * shares
            portfolio_value += position_value

            # Calculate daily returns and volatility
            df["returns"] = df["close"].pct_change()
            volatility = df["returns"].std() * np.sqrt(252)  # Annualized volatility
            avg_return = df["returns"].mean() * 252  # Annualized return
            volatilities.append(volatility)
            returns.append(avg_return)

    # Portfolio-level metrics
    avg_volatility = np.mean(volatilities) if volatilities else 0
    avg_return = np.mean(returns) if returns else 0
    risk_score = avg_volatility * 100  # Scaled to 0-100 for simplicity

    # Risk capability interpretation
    if risk_score < 20:
        risk_level = "Low"
        suggestion = "Consider stable stocks or bonds."
    elif risk_score < 40:
        risk_level = "Moderate"
        suggestion = "Balanced mix of growth and stable stocks."
    else:
        risk_level = "High"
        suggestion = "Aggressive growth stocks or options."

    # Suggest next trade based on portfolio risk
    next_trade = suggest_next_trade(portfolio, risk_level)

    return {
        "portfolio_value": portfolio_value,
        "risk_score": risk_score,
        "risk_level": risk_level,
        "suggestion": suggestion,
        "next_trade": next_trade
    }

def suggest_next_trade(portfolio, risk_level):
    """
    Suggest the next trade based on portfolio risk level.

    Args:
        portfolio (dict): Current portfolio.
        risk_level (str): Risk capability (Low, Moderate, High).

    Returns:
        dict: Suggested trade (symbol, action, quantity).
    """
    candidates = ["TCS.NS", "RELIANCE.NS", "HDFCBANK.NS", "INFY.NS"]  # Example stocks
    best_candidate = None
    best_score = -float("inf")

    for symbol in candidates:
        if symbol in portfolio:
            continue  # Skip already owned stocks
        df = get_stock_history(symbol, interval="minute", days=30)
        if not df.empty:
            df = apply_technical_indicators(df)
            recommendation = trade_recommendation(df)
            score = 1 if recommendation == "Buy" else -1 if recommendation == "Sell" else 0
            if risk_level == "Low" and score > 0:
                score += 1  # Favor stable buys
            elif risk_level == "High" and score > 0:
                score += 2  # Favor aggressive buys
            if score > best_score:
                best_score = score
                best_candidate = symbol

    return {
        "symbol": best_candidate,
        "action": "Buy" if best_score > 0 else "Hold",
        "quantity": 1  # Default quantity; adjust based on capital
    } if best_candidate else {"symbol": None, "action": "Hold", "quantity": 0}

### Trade Recommendation
def trade_recommendation(df):
    """
    Generate a simple trade recommendation.

    Args:
        df (pd.DataFrame): Data with indicators.

    Returns:
        str: Buy, Sell, or Hold recommendation.
    """
    if df.empty:
        return "No data available."
    
    latest = df.iloc[-1]
    if latest["RSI"] < 30 and latest["close"] < latest["SMA"]:
        return "Buy"
    elif latest["RSI"] > 70 and latest["close"] > latest["SMA"]:
        return "Sell"
    else:
        return "Hold"

### Enhanced Backtesting
def backtest(symbol, slippage=0.001, transaction_cost=0.0001):
    """
    Backtest the strategy with realistic assumptions.

    Args:
        symbol (str): Stock symbol.
        slippage (float): Slippage factor (default 0.1%).
        transaction_cost (float): Cost per trade (default 0.01%).

    Returns:
        dict: Performance metrics.
    """
    df = get_stock_history(symbol, interval="minute", days=30)
    if df.empty:
        return {"cumulative_return": 0}

    df = apply_technical_indicators(df)
    df["signal"] = 0
    df.loc[(df["RSI"] < 30) & (df["close"] < df["SMA"]), "signal"] = 1  # Buy
    df.loc[(df["RSI"] > 70) & (df["close"] > df["SMA"]), "signal"] = -1  # Sell

    df["position"] = df["signal"].replace(0, method='ffill')
    df["entry_price"] = df["open"].shift(-1) * (1 + slippage)
    df["strategy_returns"] = df["position"].shift(1) * (df["close"] / df["entry_price"] - 1) - transaction_cost

    wealth = (1 + df["strategy_returns"].dropna()).cumprod()
    cumulative_return = wealth.iloc[-1] - 1
    return {"cumulative_return": cumulative_return}

### Enhanced Voice Command Trading
def voice_command_trading(symbol, df):
    """
    Handle voice commands for trading and balance sheet queries.

    Args:
        symbol (str): Stock symbol.
        df (pd.DataFrame): Data with indicators.
    """
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        logging.info("ðŸŽ™ Listening for command...")
        audio = recognizer.listen(source)

    try:
        command = recognizer.recognize_google(audio).lower()
        logging.info(f"Recognized: {command}")
        if "buy" in command:
            quantity = extract_quantity(command)
            recommendation = trade_recommendation(df)
            if recommendation == "Buy":
                confirm = input(f"Confirm buy {quantity} shares of {symbol}? (yes/no): ").lower()
                if confirm == "yes":
                    logging.info(f"Executing buy order for {quantity} shares of {symbol}")
                    print(f"Bought {quantity} shares of {symbol}")
        elif "sell" in command:
            quantity = extract_quantity(command)
            recommendation = trade_recommendation(df)
            if recommendation == "Sell":
                confirm = input(f"Confirm sell {quantity} shares of {symbol}? (yes/no): ").lower()
                if confirm == "yes":
                    logging.info(f"Executing sell order for {quantity} shares of {symbol}")
                    print(f"Sold {quantity} shares of {symbol}")
        elif "balance sheet" in command:
            fetch_balance_sheet(symbol)
        else:
            logging.info("Command not recognized.")
    except Exception as e:
        logging.error(f"Error with voice command: {e}")

def extract_quantity(command):
    """
    Extract quantity from voice command.

    Args:
        command (str): Voice command string.

    Returns:
        int: Quantity of shares (default 1 if not specified).
    """
    words = command.split()
    for word in words:
        if word.isdigit():
            return int(word)
    return 1

### Fetch Balance Sheet
def fetch_balance_sheet(symbol):
    """
    Fetch and display quarterly balance sheet data.

    Args:
        symbol (str): Stock symbol (e.g., "TCS" without .NS).
    """
    try:
        url = f"https://www.screener.in/company/{symbol}/consolidated/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')
        table = soup.find('table', {'class': 'data-table'})
        if table:
            df = pd.read_html(str(table))[0]
            print(f"\nBalance Sheet for {symbol}:\n", df)
            engine.say(f"Balance sheet for {symbol} fetched successfully.")
            engine.runAndWait()
        else:
            logging.error("Balance sheet table not found.")
    except Exception as e:
        logging.error(f"Error fetching balance sheet: {e}")

### Main Execution
def main():
    symbol = "TCS.NS"  # Use .NS for NSE-listed stocks
    portfolio = {"TCS.NS": 10, "RELIANCE.NS": 5}  # Example portfolio

    # Fetch real-time data
    real_time_data = get_nse_realtime_data(symbol.split(".")[0])
    print(f"Real-Time Data for {symbol}: {real_time_data}")

    # Fetch historical data and apply indicators
    df = get_stock_history(symbol, interval="minute", days=30)
    df = apply_technical_indicators(df)

    # Portfolio analysis
    portfolio_analysis = analyze_portfolio(portfolio)
    print(f"Portfolio Analysis:\n"
          f"Value: â‚¹{portfolio_analysis['portfolio_value']:.2f}\n"
          f"Risk Score: {portfolio_analysis['risk_score']:.2f}\n"
          f"Risk Level: {portfolio_analysis['risk_level']}\n"
          f"Suggestion: {portfolio_analysis['suggestion']}\n"
          f"Next Trade: {portfolio_analysis['next_trade']}")

    # Test backtesting
    metrics = backtest(symbol)
    print(f"Backtest Cumulative Return: {metrics['cumulative_return']:.2%}")

    # Test recommendation
    recommendation = trade_recommendation(df)
    print(f"Recommendation: {recommendation}")

    # Enable voice trading
    voice_command_trading(symbol, df)

if __name__ == "__main__":
    main()
